// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: last_fetched.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const getNextFeedToFetch = `-- name: GetNextFeedToFetch :one
SELECT id, url, name FROM feeds
ORDER BY last_fetched_at ASC NULLS FIRST
`

type GetNextFeedToFetchRow struct {
	ID   uuid.UUID
	Url  string
	Name string
}

func (q *Queries) GetNextFeedToFetch(ctx context.Context) (GetNextFeedToFetchRow, error) {
	row := q.db.QueryRowContext(ctx, getNextFeedToFetch)
	var i GetNextFeedToFetchRow
	err := row.Scan(&i.ID, &i.Url, &i.Name)
	return i, err
}

const markFeedFetched = `-- name: MarkFeedFetched :exec
UPDATE feeds SET
    last_fetched_at = $1,
    updated_at = $1
WHERE feeds.id = $2
`

type MarkFeedFetchedParams struct {
	LastFetchedAt time.Time
	ID            uuid.UUID
}

func (q *Queries) MarkFeedFetched(ctx context.Context, arg MarkFeedFetchedParams) error {
	_, err := q.db.ExecContext(ctx, markFeedFetched, arg.LastFetchedAt, arg.ID)
	return err
}
